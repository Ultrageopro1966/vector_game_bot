from configparser import ConfigParser
import logging
from embeddings import OpenaiClient
import telebot
import re
from telebot.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from queue_bot import start_thread, add_request_to_queue, get_queue_length

# Initialize the ConfigParser
parser = ConfigParser()
parser.read("configs.ini")

# Get values from the config file
token = parser["DEFAULTS"].get("TOKEN")
api_key = parser["DEFAULTS"].get("API_KEY")
max_size = int(parser["DEFAULTS"].get("max_size"))
delay = int(parser["DEFAULTS"].get("delay"))
bot_name = parser["DEFAULTS"].get("bot_name")


# Initialize the telebot and OpenaiClient
bot = telebot.TeleBot(token)
client = OpenaiClient(api_key)

# Dictionary to store game data
games = {}

# Configure logging settings
logging.basicConfig(filename="logs.log", format="%(asctime)s %(message)s", filemode="w")
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)


def contains_only_english_letters(word):
    return bool(re.match("^[a-zA-Z]+$", word))


def get_parameter(text):
    try:
        return text.split()[1] if 3 > len(text.split()) > 1 else False
    except:
        return False


@bot.message_handler(commands=["start", "help"])
def start(message: Message):
    try:
        # Get the parameter from the message text
        param = get_parameter(message.text)

        # Check if the parameter is empty
        if not param:
            # Send a welcome message with instructions
            bot.send_message(
                message.chat.id,
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –∑–∞–≥–∞–¥—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞, —á—Ç–æ–±—ã —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è –∏—Ö –æ—Ç–≥–∞–¥—ã–≤–∞–ª–∏. –Ø –±—É–¥—É –¥–∞–≤–∞—Ç—å –∏–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ —É–∫–∞–∑—ã–≤–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∏ –±–ª–∏–∑–∫–∏ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Å–ª–æ–≤—É. –ß—Ç–æ–±—ã –∑–∞–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ, –Ω–∞–ø–∏—à–∏ –≤ –≥—Ä—É–ø–ø–µ /play. (–ò–≥—Ä–∞—Ç—å –Ω–∞–¥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ)",
            )
        else:
            # Check if the message is sent in a private chat
            if message.chat.type == "private":
                if param.startswith("pick"):
                    # Extract the group ID from the parameter
                    group_id = param[4:]

                    # Check if a game is already in progress for the group ID
                    if games.get(str(group_id)) is not None:
                        bot.send_message(message.chat.id, "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!")
                    else:
                        # Prompt the user to send a word to be guessed
                        answer_message = bot.send_message(
                            message.chat.id,
                            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –∑–∞–≥–∞–¥–∞—Ç—å! üò®",
                        )
                        # Register a handler for the next message to start word picking
                        bot.register_next_step_handler(
                            answer_message, start_word_picking, int(group_id)
                        )
            else:
                # Send an error message if the command with parameter is used in a group chat
                bot.send_message(
                    message.chat.id,
                    "‚ùå –ö–æ–º–∞–Ω–¥—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!",
                )
    except Exception as e:
        # Send an error message if an exception occurs
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


@bot.message_handler(commands=["play"])
def play(message: Message):
    try:
        # Check if the message is in a private chat
        if not message.chat.type == "private":
            # Check if a game is already in progress for the chat
            if games.get(str(message.chat.id)) is None:
                # Send a message with a button to start the game
                bot.send_message(
                    message.chat.id,
                    "–ß—Ç–æ–±—ã –∑–∞–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üòÅ",
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    text="–ó–∞–≥–∞–¥–∞—Ç—å!",
                                    url=f"https://t.me/{bot_name}?start=pick{message.chat.id}",
                                )
                            ],
                        ]
                    ),
                )
            else:
                # Send a message indicating that a game is already in progress
                bot.send_message(
                    message.chat.id,
                    f"‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!",
                    parse_mode="Markdown",
                )
        else:
            # Send a message indicating that the command can only be used in a group chat
            bot.send_message(
                message.chat.id,
                "‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!",
            )
    except Exception as e:
        # Send a message indicating that an error occurred
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


def from_queue_processing(request: tuple):
    answer, group_id, dms_id, user_nick = request

    logging.info(f"{answer} | {group_id}")

    games[str(group_id)] = [
        answer,
        {},
        "",
        {},
    ]

    image_generation = bot.send_message(
        dms_id,
        f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ '{answer}' –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è üòé",
    )
    url = client.generate_image(answer)
    if url[0] == 200:
        bot.send_photo(
            group_id,
            url[1],
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{user_nick}* –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ! –ü–∏—à–∏—Ç–µ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ `/guess –æ—Ç–≤–µ—Ç` –≤ —ç—Ç–æ–º —á–∞—Ç–µ!",
            parse_mode="Markdown",
        )
        bot.delete_message(dms_id, image_generation.message_id)
        games[str(group_id)] = [
            answer,
            {},
            url[1],
            {},
        ]
        bot.send_message(
            dms_id,
            f"–í–∞—à–µ —Å–ª–æ–≤–æ '{answer}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥–∞–¥–∞–Ω–æ! ‚úÖ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –≥—Ä—É–ø–ø—É.",
        )

        logging.info(f"game in {group_id} started")
    else:
        games.pop(str(group_id))
        bot.delete_message(dms_id, image_generation.message_id)
        bot.send_message(
            dms_id,
            f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: `{url[1]}`",
            parse_mode="Markdown",
        )
        bot.send_message(
            group_id,
            f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ: `{url[1]}`",
            parse_mode="Markdown",
        )


def start_word_picking(message: Message, group_id: int):
    try:
        # Check if a game is already in progress
        if games.get(str(group_id)) is not None:
            bot.send_message(message.chat.id, "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!")
        else:
            answer = message.text.strip().lower()
            # Check if the answer is a single word
            if not len(answer.split()) > 1:
                # Check if the answer contains only English letters
                if contains_only_english_letters(answer):
                    answer_embedding = client.get_embedding(answer)
                    # Check if the answer exists in the embeddings
                    if client.exist(answer_embedding):
                        logging.info(f"{answer} | {group_id}")

                        games[str(group_id)] = [
                            answer,
                            {},
                            "",
                            {},
                        ]

                        lenght = get_queue_length() + 1
                        if lenght > max_size:
                            bot.send_message(
                                message.chat.id,
                                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—á–µ—Ä–µ–¥—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –≠—Ç–∞ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.",
                            )
                            bot.send_message(
                                group_id,
                                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—á–µ—Ä–µ–¥—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –≠—Ç–∞ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.",
                            )
                            games.pop(str(group_id))

                        else:
                            add_request_to_queue(
                                answer,
                                group_id,
                                message.chat.id,
                                message.from_user.full_name,
                            )

                            if lenght > 0:
                                bot.send_message(
                                    message.chat.id,
                                    f"–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è {(lenght * delay) // 60} –º–∏–Ω",
                                )
                    else:
                        bot.send_message(
                            message.chat.id,
                            "‚ùå –¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                            reply_markup=InlineKeyboardMarkup(
                                [
                                    [
                                        InlineKeyboardButton(
                                            text="–ó–∞–≥–∞–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ!",
                                            url=f"https://t.me/{bot_name}?start=pick{group_id}",
                                        )
                                    ],
                                ]
                            ),
                        )
                else:
                    bot.send_message(
                        message.chat.id,
                        "‚ùå –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –∏ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤!",
                        reply_markup=InlineKeyboardMarkup(
                            [
                                [
                                    InlineKeyboardButton(
                                        text="–ó–∞–≥–∞–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ!",
                                        url=f"https://t.me/{bot_name}?start=pick{group_id}",
                                    )
                                ],
                            ]
                        ),
                    )
            else:
                bot.send_message(
                    message.chat.id,
                    "‚ùå –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–ª–æ–≤–æ, –∞ –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!",
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    text="–ó–∞–≥–∞–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ!",
                                    url=f"https://t.me/{bot_name}?start=pick{group_id}",
                                )
                            ],
                        ]
                    ),
                )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


@bot.message_handler(commands=["guess"])
def guess(message: Message):
    try:
        group_id = message.chat.id

        if games.get(str(group_id)) is None:
            bot.send_message(message.chat.id, "‚ùå –°–µ–π—á–∞—Å –Ω–µ –∏–¥–µ—Ç –Ω–∏–∫–∞–∫–∞—è –∏–≥—Ä–∞!")
        else:
            if not message.chat.type == "private":
                param = get_parameter(message.text)
                if param:
                    if contains_only_english_letters(param):
                        given_try = param.lower().strip()
                        correct_answer = games[str(group_id)][0].lower().strip()
                        if correct_answer == given_try:
                            if games.get(str(group_id)) is not None:
                                games[str(group_id)][3][
                                    message.from_user.first_name
                                ] = games[str(group_id)][3].get(
                                    message.from_user.first_name, []
                                ) + [
                                    100
                                ]
                                top_final("10", message.chat.id)
                                scoreboard_final(message.chat.id)
                                if (
                                    len(
                                        games[str(group_id)][3][
                                            message.from_user.first_name
                                        ]
                                    )
                                    == 1
                                ):
                                    bot.send_message(
                                        group_id,
                                        f"üéâ *{message.from_user.full_name}* –º–æ–ª–æ–¥–µ—Ü! –¢—ã –æ—Ç–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ *{correct_answer}* —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏! –í–æ—Ç —ç—Ç–æ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ! ü§Ø",
                                        parse_mode="Markdown",
                                    )
                                else:
                                    bot.send_message(
                                        group_id,
                                        f"üéâ *{message.from_user.full_name}* –æ—Ç–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ *{correct_answer}*! –ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è.",
                                        parse_mode="Markdown",
                                    )
                                games.pop(str(group_id))
                            else:
                                bot.send_message(
                                    message.chat.id, "‚ùå –°–µ–π—á–∞—Å –Ω–µ –∏–¥–µ—Ç –Ω–∏–∫–∞–∫–∞—è –∏–≥—Ä–∞!"
                                )
                        else:
                            correct_embedding = client.get_embedding(correct_answer)
                            given_try_embedding = client.get_embedding(given_try)

                            if client.exist(given_try_embedding):
                                div = client.cosine_similarity(
                                    correct_embedding, given_try_embedding
                                )
                                bot.send_message(
                                    group_id,
                                    f"–û—Ç–≤–µ—Ç *{message.from_user.full_name}* –±–ª–∏–∑–æ–∫ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –Ω–∞ *{round(div * 100, 2)}%*",
                                    parse_mode="Markdown",
                                )
                                if games.get(str(group_id)) is not None:
                                    games[str(group_id)][1][
                                        given_try
                                    ] = f"{round(div * 100, 2)}%"

                                    games[str(group_id)][3][
                                        message.from_user.first_name
                                    ] = games[str(group_id)][3].get(
                                        message.from_user.first_name, []
                                    ) + [
                                        round(div * 100, 2)
                                    ]

                            else:
                                bot.send_message(
                                    message.chat.id,
                                    f"‚ùå *{message.from_user.full_name}*, —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                                    parse_mode="Markdown",
                                )

                    else:
                        bot.send_message(
                            message.chat.id,
                            f"‚ùå *{message.from_user.full_name}*, –æ—Ç–≥–∞–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤!",
                            parse_mode="Markdown",
                        )
                else:
                    bot.send_message(
                        message.chat.id,
                        f"‚ùå *{message.from_user.full_name}*, –æ—Ç–≥–∞–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º!",
                        parse_mode="Markdown",
                    )
            else:
                bot.send_message(
                    message.chat.id,
                    "‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!",
                )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


@bot.message_handler(commands=["top"])
def top(message: Message):
    try:
        if games.get(str(message.chat.id)) != None:
            param = get_parameter(message.text)
            if not param:
                param = "5"
            if param.isdigit():
                count = int(param)
                if 1 <= count <= 100:
                    prep_val = games[str(message.chat.id)][1]
                    if len(prep_val.keys()) != 0:
                        sorted_words = list(
                            sorted(
                                list(prep_val.items()),
                                key=lambda x: float(x[1][:-1]),
                                reverse=True,
                            )
                        )

                        count = (
                            len(sorted_words) if len(sorted_words) < count else count
                        )

                        top = sorted_words[:count]

                        output = ""
                        for i, (word, percentage) in enumerate(top, start=1):
                            output += f"{i}) *{word}*: {percentage}\n"

                        bot.send_message(message.chat.id, output, parse_mode="Markdown")
                        bot.send_photo(message.chat.id, games[str(message.chat.id)][2])
                    else:
                        bot.send_message(
                            message.chat.id,
                            f"‚ùå *{message.from_user.full_name}*, –Ω–∏–∫–∞–∫–∏—Ö –æ—Ç–≥–∞–¥–æ–∫ –µ—â–µ –Ω–µ—Ç!",
                            parse_mode="Markdown",
                        )

                else:
                    bot.send_message(
                        message.chat.id,
                        f"‚ùå *{message.from_user.full_name}*, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç 1 –¥–æ 100.",
                        parse_mode="Markdown",
                    )
            else:
                bot.send_message(
                    message.chat.id,
                    f"‚ùå *{message.from_user.full_name}*, –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–æ—Ç 1 –¥–æ 100)!",
                    parse_mode="Markdown",
                )
        else:
            bot.send_message(
                message.chat.id,
                f"‚ùå *{message.from_user.full_name}*, –∏–≥—Ä–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –∏–¥–µ—Ç",
                parse_mode="Markdown",
            )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚õîÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @FoxFil\n\n–û—à–∏–±–∫–∞:\n\n`{e}`",
            parse_mode="Markdown",
        )


def top_final(amount: str, id: int):
    prep_val = games[str(id)][1]

    if len(prep_val.keys()) != 0:
        count = int(amount)

        sorted_words = list(
            sorted(list(prep_val.items()), key=lambda x: float(x[1][:-1]), reverse=True)
        )

        count = len(sorted_words) if len(sorted_words) < count else count

        top = sorted_words[:count]

        output = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º:\n\n"
        for i, (word, percentage) in enumerate(top, start=1):
            output += f"{i}) *{word}*: {percentage}\n"

        bot.send_message(id, output, parse_mode="Markdown")


def scoreboard_final(id: int):
    players = games[str(id)][3]

    output_list = []
    for elem in players.items():
        output_list.append([elem[0], len(elem[1]), sum(elem[1]) / len(elem[1])])

    output_list.sort(key=lambda x: x[2], reverse=True)

    result = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–∞–¥—ã–≤–∞–Ω–∏–π, —Å—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è):\n\n"

    max_nick = max(players.keys(), key=lambda x: (len(x) + len(str(players[x][0]))))

    max_len = len(max_nick) + len(str(len(players[max_nick])))

    for elem in output_list:
        result += f"`{elem[0]}: {' ' * (max_len - len(elem[0]) - len(str(elem[1])))}{elem[1]} | {round(elem[2])}%`\n"

    bot.send_message(id, result, parse_mode="Markdown")


start_thread(f=from_queue_processing, logger=logger, delay=delay)
bot.infinity_polling()
